
S Q L
_____________________________________________________________________________________________________________________________________
- SQL là một ngôn ngữ chuẩn để truy cập và thao tác với cơ sở dữ liệu.

=====================================================================================================================================

KIỂU DỮ LIỆU TRONG SQL SERVER
_____________________________________________________________________________________________________________________________________
    KIỂU CHUỖI:
        char(n)             - Chuỗi ký tự có độ dài cố định. Tối đa 8,000 ký tự.
        varchar(n)          - Chuỗi ký tự có độ dài bất định. Tối đa 8,000 ký tự.
        varchar(max)        - Chuỗi ký tự có độ dài bất định. Tối đa 1,073,741,824 ký tự.
        text                - Chuỗi ký tự có độ dài bất định. Tối đa 2GB dữ liệu văn bản.
        nchar               - Chuỗi Unicode với độ dài cố định. Tối đa 4,000 ký tự.
        nvarchar            - Chuỗi Unicode với độ dài bất định. Tối đa 4,000 ký tự.
        nvarchar(max)       - Chuỗi Unicode với độ dài bất định. Tối đa 536,870,912 ký tự.
        ntext               - Chuỗi Unicode với độ dài bất định. Tối đa 2GB dữ liệu văn bản.
        bit                 - Cho phép chỉ giá trị 0, 1 hoặc NULL.
        binary(n)           - Chuỗi nhị phân có độ dài cố định. Tối đa 8,000 byte.
        varbinary           - Chuỗi nhị phân có độ dài bất định. Tối đa 8,000 byte.
        varbinary(max)      - Chuỗi nhị phân có độ dài bất định. Tối đa 2GB.
        image               - Chuỗi nhị phân có độ dài bất định. Tối đa 2GB.
_____________________________________________________________________________________________________________________________________
    KIỂU SỐ:
        tinyint             - Cho phép tất cả các số từ 0 đến 255.
        smallint            - Cho phép tất cả các số giữa -32,768 và 32,767.
        int                 - Cho phép tất cả các số giữa -2,147,483,648 và 2,147,483,647.
        bigint              - Cho phép tất cả các số giữa -9,223,372,036,854,775,808 và 9,223,372,036,854,775,807.
        decimal(p,s)        - Độ lớn và độ chính xác của số.
                              Cho phép các số từ -10^38 +1 đến 10^38 -1.
                            - Tham số p chỉ ra tổng số lượng tối đa các chữ số có thể được lưu trữ (cả bên trái và bên phải dấu thập
                              phân). p phải là một giá trị từ 1 đến 38. Mặc định là 18.
                            - Tham số s chỉ ra số lượng tối đa các chữ số được lưu trữ bên phải dấu thập phân. p phải là một giá trị
                              từ 0 đến p. Mặc định là 0.
        numeric(p,s)        - Độ lớn và độ chính xác của số.
                            - Cho phép các số từ -10^38 +1 đến 10^38 -1.
                            - Tham số p chỉ ra tổng số lượng tối đa các chữ số có thể được lưu trữ (cả bên trái và bên phải dấu thập
                              phân). p phải là một giá trị từ 1 đến 38. Mặc định là 18.
                            - Tham số s chỉ ra số lượng tối đa các chữ số được lưu trữ bên phải dấu thập phân. p phải là một giá trị
                              từ 0 đến p. Mặc định là 0.
        smallmoney          - Dữ liệu tiền tệ từ -214,748.3648 đến 214,748.3647.
        money               - Dữ liệu tiền tệ từ -922,337,203,685,477.5808 đến 922,337,203,685,477.5807.
        float(n)            - Dữ liệu số dấu chấm động từ -1.79E + 308 đến 1.79E + 308.
                            - Tham số n cho biết xem các giá trị cần giữ 4 hay 8 byte để lưu trữ. float(24) sẽ giữ 4 byte, float(53)
                              sẽ giữ 8 byte. Giá trị mặc định của n là 53.
        real                - Dữ liệu số dấu chấm động từ -3.40E + 38 đến 3.40E + 38.
_____________________________________________________________________________________________________________________________________
    KIỂU DỮ LIỆU:
        datetime            - Từ ngày 1 tháng 1, 1753 đến 31 tháng 12, 9999 với độ chính xác 3.33 mili giây.
        datetime2           - Từ ngày 1 tháng 1, 0001 đến 31 tháng 12, 9999 với độ chính xác 100 nano giây.
        smalldatetime       - Từ ngày 1 tháng 1, 1900 đến 6 tháng 6, 2079 với độ chính xác 1 phút.
        date                - Chỉ lưu trữ dạng ngày. Từ ngày 1 tháng 1, 0001 đến 31 tháng 12, 9999.
        time                - Chỉ lưu trữ thời gian với độ chính xác 100 nano giây.
        datetimeoffset      - Giống như datetime2 với việc bổ sung thêm một múi giờ bù đắp.
        timestamp           - Lưu trữ một số duy nhất được cập nhật mỗi lần được tạo ra hoặc sửa đổi. Các giá trị timestamp được dựa
                              trên một đồng hồ nội bộ và không tương ứng với thời gian thực. Mỗi bảng có thể chỉ có một timestamp.
_____________________________________________________________________________________________________________________________________
    KIỂU DỮ LIỆU KHÁC:
        sql_variant         - Lưu trữ đến 8,000 byte dữ liệu của các kiểu dữ liệu khác nhau khác nhau, ngoại trừ text, ntext, và
                              timestamp.
        uniqueidentifier    - Lưu trữ một định danh duy nhất trên toàn cầu.
        xml                 - Lưu trữ dữ liệu định dạng XML. Tối đa 2GB.
        cursor              - Lưu trữ một tham chiếu đến một con trỏ được sử dụng cho các hoạt động cơ sở dữ liệu.
        table               - Lưu trữ một tập kết quả để xử lý sau.

=====================================================================================================================================

Select
_____________________________________________________________________________________________________________________________________
- Câu lệnh SELECT được dùng để lựa chọn dữ liệu từ CSDL.
- Kết quả được lưu trữ trong một bảng kết quả, gọi là tập kết quả.
_____________________________________________________________________________________________________________________________________
CÚ PHÁP
    SELECT column_name, column name
    FROM table_name;
và
    SELECT * FROM table_name;

=====================================================================================================================================

Distinct
_____________________________________________________________________________________________________________________________________
- Câu lệnh SELECT DISTINCT sử dụng để trả về các giá trị khác biệt (khác nhau).
- Trong một bảng, một cột có thể chứa nhiều giá trị trùng lặp; và đôi khi bạn chỉ muốn liệt kê các giá trị khác nhau (khác biệt).
_____________________________________________________________________________________________________________________________________
CÚ PHÁP
    SELECT DISTINCT column_name, column_name
    FROM table_name;

=====================================================================================================================================

Where
_____________________________________________________________________________________________________________________________________
- Mệnh đề Where được dùng để lọc các bản ghi.
- Mệnh đề Where trích xuất chỉ các bản ghi đáp ứng thỏa mãn một tiêu chuẩn quy định.
_____________________________________________________________________________________________________________________________________
CÚ PHÁP
    SELECT column_name, column_name
    FROM table_name
    WHERE column_name operator value;

=====================================================================================================================================

And & Or
_____________________________________________________________________________________________________________________________________
- Các toán tử AND & OR được dùng để lọc các bản ghi dựa trên nhiều hơn một điều kiện.
- Toán tử AND sẽ hiển thị một bản ghi nếu cả hai điều kiện đầu tiên và điều kiện thứ hai là đúng.
- Toán tử OR sẽ hiển thị một bản ghi nếu một trong hai điều kiện đầu tiên hoặc thứ hai là đúng.
_____________________________________________________________________________________________________________________________________
CÚ PHÁP
    SELECT column_name, column_name
    FROM table_name
    WHERE column_name operator value AND column_name operator value;
và
    SELECT column_name, column_name
    FROM table_name
    WHERE column_name operator value OR column_name operator value;

=====================================================================================================================================

Order By
_____________________________________________________________________________________________________________________________________
- Từ khóa ORDER BY được dùng để sắp xếp các kết quả theo quy định thiết lập bởi một hoặc nhiều cột.
- Các từ khóa ORDER BY mặc định sắp xếp các bản ghi theo thứ tự tăng dần. Để sắp xếp các bản ghi theo thứ tự giảm dần, sử dụng từ
  khóa DESC.
_____________________________________________________________________________________________________________________________________
CÚ PHÁP
    SELECT column_name, column_name
    FROM table_name
    ORDER BY column_name ASC|DESC, column_name ASC|DESC;

=====================================================================================================================================

Insert Into
_____________________________________________________________________________________________________________________________________
- Câu lệnh INSERT INTO được dùng để chèn các bản ghi mới vào trong một bảng.
- Có thể viết INSERT INTO theo hai dạng.
- Dạng thứ nhất không xác định các cột dữ liệu sẽ đưa vào, chỉ có các giá trị.
- Dạng thứ hai chỉ rõ cả tên cột và các giá trị được chèn vào.
_____________________________________________________________________________________________________________________________________
CÚ PHÁP
    INSERT INTO table_name
    VALUES (value1, value2, value3, ...);
hoặc
    INSERT INTO table_name (column1, column2, column3, ...)
    VALUES (value1, value2, value3, ...);

=====================================================================================================================================

Update
_____________________________________________________________________________________________________________________________________
- Câu lệnh UPDATE được dùng để cập nhật các bản ghi hiện có trong một bảng.
- Mệnh đề WHERE xác định các bản ghi cần được cập nhật. Nếu bỏ qua mệnh đề WHERE, tất cả các bản ghi sẽ được cập nhật.
_____________________________________________________________________________________________________________________________________
CÚ PHÁP
    UPDATE table_name
    SET column1=value1, column2=value2, ...
    WHERE some_column=some_value;

=====================================================================================================================================

Delete
_____________________________________________________________________________________________________________________________________
- Câu lệnh DELETE được dùng để xóa các hàng trong một bảng.
- Mệnh đề WHERE xác định các bản ghi cần được xóa. Nếu bỏ qua mệnh đề WHERE, tất cả các bản ghi sẽ bị xóa.
_____________________________________________________________________________________________________________________________________
CÚ PHÁP
    DELETE FROM table_name
    WHERE some_column=some_value;

=====================================================================================================================================

Select Top
_____________________________________________________________________________________________________________________________________
- Mệnh đề SELECT TOP được dùng để xác định số lượng bản ghi trả về.
- Mệnh để SELECT TOP có thể rất hữu ích trên các bảng lớn với hàng ngàn bản ghi. Trả về số lượng lớn các bản ghi có thể ảnh hưởng đến
  hiệu suất.
- Không phải phần lớn các hệ thống CSDL đều hỗ trợ mệnh đề SELECT TOP.
_____________________________________________________________________________________________________________________________________
CÚ PHÁP
- Trong SQL Sever / MS Access:
    SELECT TOP number column_name, column_name
    FROM table_name;
hoặc
    SELECT TOP number PERSENT column_name, column_name
    FROM table_name;
- Trong MySQL:
    SELECT column_name, column_name
    FROM table_name
    LIMIT number;
- Trong Oracle:
    SELECT column_name, column_name
    FROM table_name
    WHERE ROWNUM <= number;

=====================================================================================================================================

Like
_____________________________________________________________________________________________________________________________________
- Toán tử LIKE được dùng để tìm kiếm một mô hình quy định trong một cột.
- Các dấu "%" được sử dụng trong pattern để xác định các kí hiệu (chữ cái còn thiếu).
_____________________________________________________________________________________________________________________________________
CÚ PHÁP
    SELECT column_name, column_name
    FROM table_name
    WHERE column_name LIKE pattern;
hoặc
    SELECT column_name, column_name
    FROM table_name
    WHERE column_name NOT LIKE pattern;

=====================================================================================================================================

Wildcards
_____________________________________________________________________________________________________________________________________
- Một ký tự đại diện có thể được sử dụng để thay thế cho bất kỳ các ký tự khác trong một chuỗi.
- Ký tự đại diện được sử dụng với các toán tử LIKE.
- Các ký tự đại diện được dùng để tìm kiếm dữ liệu trong một bảng.
_____________________________________________________________________________________________________________________________________
- Các ký tự đại diện gồm:
    %               Thay thế cho không hoặc nhiều ký tự.
    _               Thay thế cho một ký tự đơn.
    [charlist]      Thiết đặt phạm vi các ký tự phù hợp nằm trong dấu ngoặc.
    [^charlist]     Kết quả chỉ phù hợp khi một ký tự được xác định không nằm trong cặp dấu ngoặc.
    [!charlist]     Kết quả chỉ phù hợp khi một ký tự được xác định không nằm trong cặp dấu ngoặc.

=====================================================================================================================================

In
_____________________________________________________________________________________________________________________________________
- Các toán tử IN cho phép bạn chỉ định nhiều giá trị trong một mệnh đề WHERE.
_____________________________________________________________________________________________________________________________________
CÚ PHÁP
    SELECT column_name, column_name
    FROM table_name
    WHERE column_name IN (value1, value2, ...);

=====================================================================================================================================

Between
_____________________________________________________________________________________________________________________________________
- Các toán tử BETWEEN được sử dụng để chọn các giá trị trong một phạm vi. Các giá trị có thể là số, văn bản, hoặc ngày.
_____________________________________________________________________________________________________________________________________
CÚ PHÁP
    SELECT column_name, column_name
    FROM table_name
    WHERE column_name BETWEEN value1 AND value2;

=====================================================================================================================================

Aliases
_____________________________________________________________________________________________________________________________________
- ALIAS được sử dụng để tạm thời đổi tên một bảng hoặc một tiêu đề cột, gọi là bí danh.
- Về cơ bản bí danh được tạo ra để làm cho tên cột dễ đọc hơn.
_____________________________________________________________________________________________________________________________________
CÚ PHÁP
- Bí danh cho cột:
    SELECT column_name AS alias_name, column_name AS alias_name
    FROM table_name
- Bí danh cho bảng:
    SELECT column_name, column_name
    FROM table_name AS alias_name

=====================================================================================================================================

Joins
_____________________________________________________________________________________________________________________________________
- Từ khóa JOIN được sử dụng để nối các hàng từ bảng bên trái (table_A), với các hàng so khớp với bảng bên phải (table_B). Nếu không
  tìm thấy giá trị nào trùng khớp trong bảng bên phải, bản ghi trong bảng bên trái đó sẽ không được trả về.
_____________________________________________________________________________________________________________________________________
CÚ PHÁP
    SELECT table_A.column_1, table_A.column_2, table_B.column_2
    FROM table_A
    JOIN table_B
    ON table_A.column_3 = table_B.column_1

=====================================================================================================================================

Inner Join
_____________________________________________________________________________________________________________________________________
- Từ khóa INNER JOIN được sử dụng để nối các hàng từ bảng bên trái (table_A), với các hàng so khớp với bảng bên phải (table_B). Nếu
  không tìm thấy giá trị nào trùng khớp trong bảng bên phải, bản ghi trong bảng bên trái đó sẽ không được trả về.
- INNER JOIN cũng giống như JOIN.
_____________________________________________________________________________________________________________________________________
CÚ PHÁP
    SELECT table_A.column_1, table_A.column_2, table_B.column_2
    FROM table_A
    INNER JOIN table_B
    ON table_A.column_3 = table_B.column_1

=====================================================================================================================================

Left Join
_____________________________________________________________________________________________________________________________________
- Từ khóa LEFT JOIN được sử dụng để nối các hàng từ bảng bên trái (table_A), với các hàng so khớp với bảng bên phải (table_B). Nếu
  không tìm thấy giá trị nào trùng khớp trong bảng bên phải, giá trị NULL sẽ được trả về trong bảng bên trái.
- Trong một số CSDL, LEFT JOIN được gọi là LEFT OUTER JOIN.
_____________________________________________________________________________________________________________________________________
CÚ PHÁP
    SELECT table_A.column_1, table_A.column_2, table_B.column_2
    FROM table_A
    LEFT JOIN table_B
    ON table_A.column_3 = table_B.column_1
hoặc
    SELECT table_A.column_1, table_A.column_2, table_B.column_2
    FROM table_A
    LEFT OUTER JOIN table_B
    ON table_A.column_3 = table_B.column_1

=====================================================================================================================================

Right Join
_____________________________________________________________________________________________________________________________________
- Từ khóa RIGHT JOIN được sử dụng để nối các hàng từ bảng bên phải (table_B), với các hàng so khớp với bảng bên trái (table_A). Nếu
  không tìm thấy giá trị nào trùng khớp trong bảng bên trái, giá trị NULL sẽ được trả về trong bảng bên phải.
- Trong một số CSDL, RIGHT JOIN được gọi là RIGHT OUTER JOIN.
_____________________________________________________________________________________________________________________________________
CÚ PHÁP
    SELECT table_A.column_1, table_A.column_2, table_B.column_2
    FROM table_A
    RIGHT JOIN table_B
    ON table_A.column_3 = table_B.column_1
hoặc
    SELECT table_A.column_1, table_A.column_2, table_B.column_2
    FROM table_A
    RIGHT OUTER JOIN table_B
    ON table_A.column_3 = table_B.column_1

=====================================================================================================================================

Full Join
_____________________________________________________________________________________________________________________________________
- Từ khóa FULL OUTER JOIN được sử dụng để nối các hàng từ bảng bên trái (table_A), với các hàng so khớp với bảng bên phải (table_B).
- Từ khóa FULL OUTER JOIN kết hợp kết quả của cả LEFT JOIN và RIGHT JOIN.
_____________________________________________________________________________________________________________________________________
CÚ PHÁP
    SELECT table_A.column_1, table_A.column_2, table_B.column_2
    FROM table_A
    FULL OUTER JOIN table_B
    ON table_A.column_3 = table_B.column_1

=====================================================================================================================================

Union
_____________________________________________________________________________________________________________________________________
- Các toán tử ONION được sử dụng để kết hợp các kết quả của hai hoặc nhiều câu SELECT.
- Chú ý rằng mỗi lệnh SELECT trong UNION phải có cùng số cột. Các cột cũng phải có kiểu dữ liệu tượng tự.
_____________________________________________________________________________________________________________________________________
CÚ PHÁP
    SELECT column_name, column_name FROM table_A
    UNION
    SELECT column_name, column_name FROM table_B;

=====================================================================================================================================

Select Into
_____________________________________________________________________________________________________________________________________
- Câu lệnh SELECT INTO chọn dữ liệu từ một bảng và chèn nó vào một bảng mới.
- Có thể sử dụng để sao chép thông tin từ một bảng vào một bảng mới.
- Câu lệnh SELECT INTO cũng có thể được dùng để tạo ra một bảng trống mới sử dụng giản đồ của người khác. Chỉ cần thêm một mệnh đề
  WHERE tạo ra các truy vấn không trả về dữ liệu. Vd: WHERE 1=0.
- Sử dụng mệnh đề IN để sao chép bảng vào CSDL khác.
_____________________________________________________________________________________________________________________________________
CÚ PHÁP
- Sao chép tất cả các cột:
    SELECT *
    INTO new_table [IN external_db]
    FROM table_name;
- Sao chép các cột được chỉ định:
    SELECT column_name, column_name
    INTO new_table [IN external_db]
    FROM table_name;

=====================================================================================================================================

Insert Into Select
_____________________________________________________________________________________________________________________________________
- Câu lệnh INSERT INTO SELECT chọn dữ liệu từ một bảng và chèn nó vào một bảng hiện tại.
- Có thể sử dụng để sao chép thông tin từ một bảng vào một bảng khác.
_____________________________________________________________________________________________________________________________________
CÚ PHÁP
- Sao chép tất cả các cột:
    INSERT INTO table_B
    SELECT * FROM table_A;
- Sao chép các cột được chỉ định:
    INSERT INTO table_B (column_name, column_name)
    SELECT column_name, column_name
    FROM table_A;

=====================================================================================================================================

Create DB
_____________________________________________________________________________________________________________________________________
- Câu lệnh CREATE DATABASE được sử dụng để tạo ra một CSDL.
_____________________________________________________________________________________________________________________________________
CÚ PHÁP
    CREATE DATABASE dbname;

=====================================================================================================================================

Create Table
_____________________________________________________________________________________________________________________________________
- Câu lệnh CREATE TABLE được sử dụng để tạo một bảng trong một CSDL.
- Bảng được tổ chức theo các hàng và cột; và mỗi bảng phải có một cái tên.
- Các thông số column_name chỉ định tên của các cột, data_type xác định kiểu dữ liệu của cột, size xác định độ dài tối đa của cột.
_____________________________________________________________________________________________________________________________________
CÚ PHÁP
    CREATE TABLE table_name (
    column_name_1 data_type(size),
    column_name_2 data_type(size),
    column_name_3 data_type(size),
    ....
    );

=====================================================================================================================================

Not Null
_____________________________________________________________________________________________________________________________________
- Theo mặc định, một cột trong bảng có thể lưu trữ các giá trị NULL.
- Ràng buộc NOT NULL chỉ ra rằng một cột không thể lưu trữ giá trị NULL.
- Ràng buộc NOT NULL buộc các cột luôn luôn chứa một giá trị. Điều này có nghĩa rằng không thể chèn một bản ghi mới, hoặc cập nhật
  một bản ghi mà không cần thêm một giá trị cho cột này.
_____________________________________________________________________________________________________________________________________
CÚ PHÁP
    CREATE TABLE table_name (
    column_name_1 datatype(size) NOT NULL,
    column_name_2 datatype(size) NOT NULL,
    column_name_3 datatype(size),
    ....
    );

=====================================================================================================================================

